snippet selectcnk2 "select k from n"
ll cnk(int n, int k){
  if(n<k)return 0;
  ll ret=1;
  for(ll i=1;i<=k;i++){ ret = ret*(n-i+1)/i; }
  return ret;
}
endsnippet

snippet gcd "gcd of two numbers"
${1:int} gcd($1 a, $1 b){
  if(b==0)return a;
  return gcd(b,a%b);
}
endsnippet

snippet lcm "lcm of two numbers"
${1:int} lcm($1 a, $1 b){
  $1 g=gcd(a,b);
  return (a/g)*b;
}
endsnippet

snippet power "a to the power of b"
int power(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1) { mulmod(res, a); }
    b >>= 1;
    mulmod(a, a);
  }
  return res;
}
endsnippet

snippet inversemod "inverse mod of a number"
int inv(int a) { return power(a, MODV - 2); }
endsnippet

snippet fact "calculate factorials"
vi fact, invfact;
void calcfact(){
  static bool done=false;
  if(done)return;
  done=true;
  fact.resize(MAXN);
  invfact.resize(MAXN);
  fact[0]=invfact[0]=1;
  for(int i=1;i<MAXN;i++){
    fact[i]=fact[i-1];
    invfact[i]=invfact[i-1];
    mulmod(fact[i],i);
    mulmod(invfact[i],inv(i));
  }
}
endsnippet

snippet selectcnk "calculate cnk using mod"
int cnp(int n, int k){
  static bool done=false;
  if(!done){ done=true; calcfact(); }
  int res=fact[n];
  mulmod(res,invfact[k]);
  mulmod(res,invfact[n-k]);
  return res;
}
endsnippet

snippet matrix-ops "matrix operations"
void roll(char &a, char &b, char &c, char &d){
  int temp=a;
  a=b; b=c; c=d; d=temp;
}
template <typename T>
T rotate(T inp, int n){
  T b=a;
  for(int i=0;i<n/2; i++)
  for(int j=0;j<(n+1)/2;j++){
    roll(b[i][j],b[n-1-j][i],b[n-1-i][n-1-j],b[j][n-1-i]);

  }
  return b;
}
template <typename T>
T reflect(T a, int n){
  T b=a;
  for(int i=0;i<n;i++){
    for(int j=0;j<n/2;j++)swap(b[i][j],b[i][n-1-j]);
  }
  return b;
}
endsnippet

snippet sieve "generate and find prime"
bool prime[MAXN];
vi pn;
void sieve(){
  memset(prime,true,sizeof(prime));
  pn.clear();
  prime[0]=prime[1]=false;
  for(int i=2;i*i<=MAXN;i++)
  if(prime[i]){
    for(int j=i*i;j<MAXN;j+=i)prime[j]=false;
  }
  for(int i=2;i<MAXN;i++){
    if(prime[i])pn.pb(i);
  }
}
bool isprime(ll n){
  if(n<MAXN)return prime[n];
  for(size_t i=0;i<pn.size() && (ll)pn[i]*pn[i]<=n;i++){
    if(n%pn[i]==0)return false;
  }
  return true;
}
endsnippet
snippet matrix "matrix multiplication and exp"
class mat{
  typedef ${1:int} T;
  typedef vector<vector<T>> M;
  typedef vector<T> V;
  public:
  int r, c;
  M m;
  mat(const int &r, const int &c):r(r),c(c),m(r,V(c,0)){}
  mat mul(const mat &other){
    assert(c==other.r);
    int rr=r, rc=other.c;
    mat res(rr,rc);
    for(int i=0;i<rr;i++)for(int j=0;j<rc;j++)
    for(int k=0;k<c;k++)res.m[i][j]+=m[i][k]*other.m[k][j];
    return res;
  }
  void pow(${2:int} b){
    assert(r==c);
    mat res(r,c);
    for(int i=0;i<r;i++)res.m[i][i]=1;
    while(b){
      if(b&1)res=res.mul(*this);
      *this=mul(*this);
      b/=2;
    }
    m=move(res.m);
  }
};
endsnippet

snippet compress "compress index values"
class cix{
  typedef ${1:int} T;
  public:
  int ix;
  map<T,int> ma;
  map<T,int>::iterator it;
  vector<T> r;
  cix():ix(0){}
  int get(T a){
    it=ma.find(a);
    if(it==ma.end()){
      ma[a]=ix;
      r.pb(a);
      return ix++;
    }
    else return (*it).se;
  }
  bool has(T a){ return ma.find(a)!=ma.end(); }
  T rget(int i){ return r[i]; }
  int size(){return ix;}
};
endsnippet

snippet compressrange "compress range"
template<class T>
class crix{
  typedef pair<T,T> pdt;
  public:
  set<T> st;
  vector<pdt> vpt;
  vector<T> sz;
  crix(){}
  void add(T a){st.insert(a);}
  void doit(){
    auto it=st.begin();
    int n=st.size();
    for(int i=0;i<n-1;i++){
      T bg=(*it);
      it++;
      T en=(*it)-1;
      vpt.pb({bg,en});
      sz.pb(en-bg+1);
    }
  }
  int size(){return vpt.size();}
  pdt get(int ix){return vpt[ix];}
  T ixsz(int ix){return sz[ix];}
  bool wraps(int ix, T a, T b){return (a<=vpt[ix].fi && b>=vpt[ix].se);}
};
endsnippet
snippet fft "fft"
namespace FFT {
  #define PI 3.141592653589793
  typedef complex<dbl> base;
  typedef vector<base> vbase;
  void addmod(int& x, int y, int mod) { (x += y) >= mod && (x -= mod); }
  int mulmod(int x, int y, int mod) { return x * 1ll * y % mod; }

  void fft(vbase &a, bool invert=false) {
    int n = a.size();
    for (int i = 1, j = 0; i<n; ++i) {
      int bit = n >> 1;
      for (; j >= bit; bit >>= 1) j -= bit;
      j += bit;
      if (i < j) swap(a[i], a[j]);
    }
    for (int len = 2; len <= n; len <<= 1) {
      double ang = 2 * PI / len * (invert ? -1 : 1);
      base wlen(cosl(ang), sinl(ang));
      for (int i = 0; i<n; i += len) {
        base w(1);
        for (int j = 0; j<len / 2; ++j) {
          base u = a[i + j], v = a[i + j + len / 2] * w;
          a[i + j] = u + v; a[i + j + len / 2] = u - v;
          w *= wlen;
        }
      }
    }
    if(invert){ for(int i=0;i<n;i++)a[i]/=n; }
  }

  vi mult(const vi& a, const vi& b) {
    size_t n=1;
    while (n < max(a.size(), b.size()))  n <<= 1;
    n <<= 1;
    vbase A(a.begin(),a.end());
    vbase B(b.begin(),b.end());
    A.resize(n), B.resize(n);

    fft(A), fft(B);
    for(size_t i=0;i<n;i++) A[i] *= B[i];
    fft(A,true);

    vi c(n, 0);
    for(size_t i=0;i<n;i++) c[i] = ((ll) (A[i].real() + 0.5)) % MODV;

    return c;
  }

  vi squ(vi a) {
    vbase fa(a.begin(), a.end()), fb(a.begin(), a.end());
    size_t n = 1;
    while (n < a.size())  n <<= 1;
    n <<= 1;
    fa.resize(n), fb.resize(n);

    fft(fa, false);
    fb = fa;
    for (size_t i = 0; i < n; ++i) fa[i] *= fb[i];
    fft(fa, true);

    vi res;
    res.resize(n);
    for (size_t i = 0; i < n; ++i)
      res[i] = int(fa[i].real() + 0.5);
    return res;
  }

  vi multmod(const vi& a, const vi& b) {
    int base = (int) sqrtl(MODV);
    int na=a.size(), nb=b.size();

    vi a0(na), a1(na);
    for(int i=0;i<na;i++){
      a0[i] = a[i] % base;
      a1[i] = a[i] / base;
      assert(a[i] == a0[i] + base * a1[i]);
    }

    vi b0(nb), b1(nb);
    for(int i=0;i<nb;i++){
      b0[i] = b[i] % base;
      b1[i] = b[i] / base;
      assert(b[i] == b0[i] + base * b1[i]);
    }

    vi a01 = a0;
    for(int i=0;i<na;i++){addmod(a01[i], a1[i], MODV);}

    vi b01 = b0;
    for(int i=0;i<nb;i++){addmod(b01[i], b1[i], MODV);}

    vi C = mult(a01, b01);

    vi a0b0 = mult(a0, b0);
    vi a1b1 = mult(a1, b1);

    vi mid = C;
    int nc=C.size();
    for(int i=0;i<nc;i++){
      addmod(mid[i], -a0b0[i] + MODV, MODV);
      addmod(mid[i], -a1b1[i] + MODV, MODV);
    }

    vi res = a0b0;
    for(size_t i=0;i<res.size();i++){ addmod(res[i], mulmod(base, mid[i], MODV), MODV); }

    base = mulmod(base, base, MODV);
    for(size_t i=0;i<res.size();i++) { addmod(res[i], mulmod(base, a1b1[i], MODV), MODV); }

    return res;
  }
}
endsnippet

snippet forwarddp "forward dynamic programming"
template<class T>
class fwdp{
  int n;
  const vi &cnt;
  const T &val;
  int dpsz;
  vi dp, sel;
  public:
  fwdp(int n,const vi &cnt, const T& val):n(n),cnt(cnt),val(val){
    dpsz=1;
    for(auto i:cnt){
      //0 to i inclusive
      dpsz *= (1+i);
    }
    dp.resize(dpsz,MODV);
    sel.resize(n);
  }

  void rec(int ix, int st, int cl, int cr, int &res){
    if(ix==n){
      if(cl==cr){
        res=min(res,dp[st]+cl*cr);
      }
      return;
    }
    for(int i=0;i<=sel[ix];i++){
      //i is used for this state sel[ix]-i is unused;
      rec(ix+1, st*(1+cnt[ix])+i, cl+val[ix].fi*(sel[ix]-i), cr+val[ix].se*(sel[ix]-i), res);
    }
  }

  void dfs(int v, int st){
    if(v==n){
      if(st>0){
        rec(0,0,0,0,dp[st]);
      }else{
        dp[st]=0;
      }

      return;
    }
    for(int i=0;i<=cnt[v];i++){
      sel[v]=i;
      //0 to i inclusive
      dfs(v+1,st*(1+cnt[v])+i);
    }
  }
  int doit() {
    dfs(0,0);
    return dp[dpsz-1];
  }
};
endsnippet
snippet mirror "mirror board"
struct mirrors {
  int r, c;
  int dr[4]={1, 0,-1,0};
  int dc[4]={0,-1, 0,1};
  vector<vi> board;
  mirrors(int r, int c):r(r),c(c),board(r+2,vi(c+2,0)){}
  pi go(pi a){
    int dir;
    if(a.fi==0)  dir=0; //top row
    else if(a.se==c+1) dir=1; //right column
    else if(a.fi==r+1) dir=2; //bottom row
    else dir=3; //left column
    a.fi+=dr[dir], a.se+=dc[dir];
    while(a.fi>0 && a.fi<=r && a.se>0 && a.se<=c){
      if(!board[a.fi][a.se]){
        board[a.fi][a.se]=(dir&1)?1:3;
      }
      dir ^= board[a.fi][a.se];
      a.fi+=dr[dir], a.se+=dc[dir];
    }
    return a;
  }

  //1 to c on top row, c+1 to c+r on the right column, 
  //c+r+1 to c+r+c on bottom row, c+c+r+1 to c+c+r+r on left column
  pi getpi(int a){
    if(a<=c)return {0,a};
    else if(a<=(c+r))return{a-c,c+1};
    else if(a<=(c+c+r))return{r+1,c+c+r-a+1};
    else return {r+r+c+c-a+1,0};
  }
  void printboard() {
    for(int ri=1;ri<=r;ri++){
      for(int ci=1;ci<=c;ci++){
        putchar(board[ri][ci]==3?'\\':'/');
      }
      puts("");
    }
  }

};

endsnippet
