snippet cnk2 "select k from n"
ll cnk(int n, int k){
  if(n<k)return 0;
  ll ret=1;
  for(ll i=1;i<=k;i++){ ret = ret*(n-i+1)/i; }
  return ret;
}
endsnippet

snippet gcd "gcd of two numbers"
${1:int} gcd($1 a, $1 b){
  if(b==0)return a;
  return gcd(b,a%b);
}
endsnippet

snippet lcm "lcm of two numbers"
${1:int} lcm($1 a, $1 b){
  $1 g=gcd(a,b);
  return (a/g)*b;
}
endsnippet

snippet power "a to the power of b"
int power(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1) { mulmod(res, a); }
    b >>= 1;
    mulmod(a, a);
  }
  return res;
}
endsnippet

snippet inversemod "inverse mod of a number"
int inv(int a) { return power(a, MODV - 2); }
endsnippet

snippet fact "calculate factorials"
int *fact, *invfact;
void calcfact(){
  static bool done=false;
  if(done)return;
  done=true;
  fact=new int[MAXN];
  invfact=new int[MAXN];
  fact[0]=invfact[0]=1;
  for(int i=1;i<MAXN;i++){
    fact[i]=fact[i-1];
    invfact[i]=invfact[i-1];
    mulmod(fact[i],i);
    mulmod(invfact[i],inv(i));
  }
}
endsnippet

snippet cnk "calculate cnk using mod"
int cnp(int n, int k){
  static bool done=false;
  if(!done){ done=true; calcfact(); }
  int res=fact[n];
  mulmod(res,invfact[k]);
  mulmod(res,invfact[n-k]);
  return res;
}
endsnippet

snippet matrix "matrix operations"
void roll(char &a, char &b, char &c, char &d){
  int temp=a;
  a=b; b=c; c=d; d=temp;
}
template <typename T>
T rotate(T inp, int n){
  T b=a;
  for(int i=0;i<n/2; i++)
  for(int j=0;j<(n+1)/2;j++){
    roll(b[i][j],b[n-1-j][i],b[n-1-i][n-1-j],b[j][n-1-i]);

  }
  return b;
}
template <typename T>
T reflect(T a, int n){
  T b=a;
  for(int i=0;i<n;i++){
    for(int j=0;j<n/2;j++)swap(b[i][j],b[i][n-1-j]);
  }
  return b;
}
endsnippet

