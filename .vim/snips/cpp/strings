snippet kmp "knuth morris pratt"
class kmp{
  typedef string T;
  int n;
  const T &a;
  vi pf;
  public:
  kmp(const int &n, const T &a):n(n),a(a),pf(n+1){
    int i, j;
    pf[0]=pf[1]=0;
    for(i=2;i<=n;i++){
      j=pf[i-1];
      while(j>0 && a[i-1]!=a[j])j=pf[j];
      if(a[i-1]==a[j])j++;
      pf[i]=j;
    }
  }
  void search(const int &m, const T&b){
    vector<bool> mt(m+1,false);
    int i,j;
    for(i=0,j=0;i<m;i++){
      while(j>0 && a[j]!=b[i])j=pf[j];
      if(a[j]==b[i])j++;
      if(j==n){
        mt[i]=1;
        j=pf[j];
      }
    }
  }
};
endsnippet

snippet zalgo "z algorithm pattern matching"
template <typename T>
void zalgo(const T &s) {
  int L = 0, R = 0;
  vi z(n+1,0);
  int n=strlen(s);
  for (int i = 1; i < n; i++) {
    if (i > R) {
      L = R = i;
      while (R < n && s[R-L] == s[R]) R++;
      z[i] = R-L; R--;
    } else {
      int k = i-L;
      if (z[k] < R-i+1) z[i] = z[k];
      else {
        L = i;
        while (R < n && s[R-L] == s[R]) R++;
        z[i] = R-L; R--;
      }
    }
  }
}
endsnippet

snippet hash "hashing"
int pw[2][MAXL];
struct mhash {
  static int md[2];
  const ll b[2]={31,29};
  static bool done;
  pll h;
  vi vh[2];
  int re[2];
  int len;
  mhash():h({0,0}),len(0){
    if(!done){ calcpw(); }
  }
  mhash(char *st){
    if(!done){calcpw();}
    len=strlen(st);
    vh[0].assign(len+1,0);
    vh[1].assign(len+1,0);
    for(int i=1;i<=len;i++){
      for(int j=0;j<2;j++){
        vh[j][i]=(vh[j][i-1]*b[j]+st[i-1]-'a')%md[j];
      }
    }
  }
  ll geth(int l, int r){
    for(int i=0;i<2;i++){
      re[i]=(vh[i][r] - (ll)vh[i][l-1]*pw[i][r-l+1])%md[i];
      if(re[i]<0)re[i]+=md[i];
    }
    return (((ll)re[0]<<30)|re[1]);
  }
  void reset(){h.fi=h.se=len=0;}
  void merge(char c){
    h.fi=(b[0]*h.fi+(c-'a')+1)%md[0];
    h.se=(b[1]*h.se+(c-'a')+1)%md[1];
    len++;
  }
  void merge(const mhash &o){
    if(o.len==0)return;
    h.fi = (h.fi*pw[0][o.len]+o.h.fi)%md[0];
    h.se = (h.se*pw[1][o.len]+o.h.se)%md[1];
    len+=o.len;
    assert(len<MAXL);
  }
  ll geth(){ll ret=h.fi;ret <<= 30;return(ret|h.se);}
  bool isPrime(int x) {for(int i=2;i*i<=x;i++){if(x%i==0) return 0;} return 1;}
  void calcpw(){
    done=true;
    for(int i=1e9+24,j=0;j<2;i++){
      if((rand()&7)==0 && isPrime(i)){
        md[j]=i;
        j++;
      }
    }
    pw[0][0]=1;
    pw[1][0]=1;
    for(int i=1;i<MAXL;i++){
      pw[0][i]=(pw[0][i-1]*b[0])%md[0];
      pw[1][i]=(pw[1][i-1]*b[1])%md[1];
    }
  }
  mhash& operator=(const mhash &o){
    h.fi=o.h.fi; h.se=o.h.se;
    len=o.len;
    return *this;
  }
  bool operator<(const mhash &o)const{
    if(h.fi!=o.h.fi)return h.fi<o.h.fi;
    return h.se<o.h.se;
  }
  bool operator==(const mhash &o)const{return h.fi==o.h.fi && h.se==o.h.se;}
};
bool mhash::done=false;
int mhash::md[2]={0,0};
endsnippet
