snippet kmp "knuth morris pratt"
class kmp{
  typedef string T;
  int n;
  const T &a;
  vi pf;
  public:
  kmp(const int &n, const T &a):n(n),a(a),pf(n+1){
    int i, j;
    pf[0]=pf[1]=0;
    for(i=2;i<=n;i++){
      j=pf[i-1];
      while(j>0 && a[i-1]!=a[j])j=pf[j];
      if(a[i-1]==a[j])j++;
      pf[i]=j;
    }
  }
  void search(const int &m, const T&b){
    vector<bool> mt(m+1,false);
    int i,j;
    for(i=0,j=0;i<m;i++){
      while(j>0 && a[j]!=b[i])j=pf[j];
      if(a[j]==b[i])j++;
      if(j==n){
        mt[i]=1;
        j=pf[j];
      }
    }
  }
};
endsnippet

snippet calcz "z algorithm pattern matching"
template <typename T>
void zalgo(const T &s) {
  int L = 0, R = 0;
  vi z(n+1,0);
  int n=strlen(s);
  for (int i = 1; i < n; i++) {
    if (i > R) {
      L = R = i;
      while (R < n && s[R-L] == s[R]) R++;
      z[i] = R-L; R--;
    } else {
      int k = i-L;
      if (z[k] < R-i+1) z[i] = z[k];
      else {
        L = i;
        while (R < n && s[R-L] == s[R]) R++;
        z[i] = R-L; R--;
      }
    }
  }
}
endsnippet
