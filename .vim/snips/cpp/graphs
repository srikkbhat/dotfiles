snippet graphal "graph adjecency list"
class graphal
{
  public:
    int n;
    //${1:0} 1->bidirectional, 2->reverse edges
    vector<vi> ed`!p
if t[1]=="2":
  snip.rv= ", rd;"
else:
  snip.rv=";"
`
    graphal(const int &n):n(n),ed(n)`!p
if t[1]=="2":
  snip.rv= ",rd(n)"
else:
  snip.rv=""
`{}
    void reset(int n){
	  ed.clear();
	  this->n=n;
	  ed.resize(n);
	}
    void add(int a, int b){ ed[a].push_back(b);`!p
if t[1]=="1":
  snip.rv= "ed[b].push_back(a);"
elif t[1]=="2":
  snip.rv= "rd[b].push_back(a);"
else:
  snip.rv=""
` }
    void load(int m){ for(int i=0;i<m;i++){int a=gi(),b=gi();add(a-1,b-1);}}
};
endsnippet

snippet graphwal "weighted adjeceny list graph"
class graphwal
{
  public:
    int n;
    //${1:0} 1->bidirectional, 2->reverse edges
    typedef vector<pair<int,${2:int}>> vpi;
    vector<vpi> ed`!p
if t[1]=="2":
  snip.rv= ",rd;"
else:
  snip.rv=";"
`
    graphwal(int n):n(n),ed(n)`!p
if t[1]=="2":
  snip.rv= ",rd(n)"
else:
  snip.rv=""
`{}
    void reset(int n){
	  ed.clear();
	  this->n=n;
	  ed.resize(n);
	}
    void add(int a, int b, $2 w){ed[a].pb(mp(b,w));`!p
if t[1]=="1":
  snip.rv= "ed[b].pb(mp(a,w));"
elif t[1]=="2":
  snip.rv= "rd[b].pb(mp(a,w));"
else:
  snip.rv=""
`}
    void load(int m){ for(int i=0;i<m;i++){int a=gi(),b=gi();ll w=gll();add(a-1,b-1,w);}}
};
endsnippet

snippet graphed "graph with edges stored seperately"
template<class T>
class edge{
  public:
    int a, b;
    T cap, flow;
    edge(const int &a, const int &b, const T &cap, T flow=0):
      a(a),b(b),cap(cap),flow(flow){}
};

template<class T>
class graphed {
  public:
  int n;
  vector<vi> e;
  vector<edge<T>> edges;
  graphed(int n):n(n),e(n){}
  void add(const int &s, const int &d, const T &cap){
    assert((s>=0)&&(d>=0)&&(s<n)&&(d<n));
    e[s].pb(edges.size());
    edges.pb({s,d,cap});
  }
  void resize(int n){this->n=n;e.resize(n);}
  void load(int m){
    int a,b;T cap;
    for(int i=0;i<m;i++){
      a=gi()-1, b=gi()-1,cap=gll();
      add(a,b,cap);
    }
  }
};
endsnippet

snippet dfs "dfs on graphal or wal"
void dfs(int v=0, int pa=-1, int d=0){
  bool leaf=true;
  for(auto i:ed[v])
    if(i!=pa){
      leaf=false;
      dfs(i,v,d+1);
    }
  /* if(leaf); */
}
endsnippet

snippet dfspreorder "preorder indexing dfs on graphal or wal"
void dfspreorder(int v=0, int pa=-1){
  static int ix=0;
  pre[ix++]=v;
  up[v]=pa;
  for(auto i:ed[v]) if(i.fi!=pa){ dfspreorder(i.fi,v); }
}
endsnippet


snippet diameter "get the diameter of a tree"
int diameter(int &d, int ix=0, int par=-1){
  //${1:0} 0->all nodes 1->selected nodes
  int mx=`!p
if t[1]=="1":
  snip.rv="-1"
else:
  snip.rv="0"
`,mx2=-1,cur;`!p
if t[1]=="1":
  snip.rv="\n  if(selected[ix])mx=0;"
`
  for(auto i:ed[ix])
  if(i!=par){
    cur=diameter(d,i,ix);
    if(cur>mx){mx2=mx;mx=cur;}else if(cur>mx2)mx2=cur;
  }
  if(mx2!=-1)d=max(d,mx+mx2);
`!p
if t[1]=="1":
  snip.rv="  if(selected[ix] || mx>0)mx++;"
else:
  snip.rv="  mx++;"
`
  return mx;
}
endsnippet

snippet disjoint "disjoint sets"
class disjoint{
  public:
    vi p;
    disjoint(int n):p(n,-1){}
    int find(int ix){return p[ix]<0?ix:p[ix]=find(p[ix]);}
    bool join(int a, int b){
      if((a=find(a))==(b=find(b)))return false;
      if(p[a]<p[b])swap(a,b);
      p[a]+=p[b];
      p[b]=a;
      return true;
    }
};
endsnippet

snippet toposort "topological sorting"
class toposort{
  public:
    vi ts;
    toposort(graphal &g){
      int n=g.n, ix, nx, qb=0,qe=0;
      vi inc(n,0), q(n+1,0);
      ts.clear();

      for(int i=0;i<n;i++) for(auto j:g.ed[i]){ inc[j]++; }

      for(int i=0;i<n;i++)if(inc[i]==0)q[qe++]=i;
      while(qb<qe){
        ix=q[qb++]; ts.pb(ix);
        for(int i=0;i<g.ed[ix].size();i++){
          nx=g.ed[ix][i];
          inc[nx]--;
          if(inc[nx]==0)q[qe++]=nx;
        }
      }
    }
};
endsnippet

snippet maxbpm "maximum bipartite matching"
template <typename T>
class maxbpm {
  int nl,nr;
  vi pr, nx;
  vector<bool> seen;
  const T &adj;
  public:
  maxbpm(int nl, int nr, const T &adj):
    nl(nl),nr(nr),adj(adj),pr(nr,-1),nx(nl,-1),seen(nl){}

  bool dfs(int u){
    if(u==-1) return true;
    if(seen[u]) return false;
    seen[u]=true;
    for(int v=0;v<nr;v++){
      if(adj[u][v] && dfs(pr[v])){
        pr[v]=u;
        nx[u]=v;
        return true;
      }
    }
    return false;
  }

  int calc(){
    int mx=0;
    for(int u=0;u<nl;u++){
      memset(seen,0,sizeof(bool)*nl);
      if(dfs(u)) mx++;
    }
    return mx;
  }
};
endsnippet

snippet lca "least common ancestor"
struct lca {
  const graphwal &g;
  static const int L=21;
  const int n;
  vector<vi> up, mx;
  vi h;
  lca(const graphwal &g, const int &n):
    g(g),n(n), up(n,vi(L,0)),mx(n,vi(L,0)),h(n,0){ }
  void dfs(int v=0, int p=0){
    int x;
    for(int i=1;i<L;i++){
      x=up[v][i-1];
      up[v][i]=up[x][i-1];
      mx[v][i]=max(mx[v][i-1],mx[x][i-1]);
    }
    for(auto i:g.ed[v])
      if(i.fi!=p){
        h[i.fi]=h[v]+1;
        up[i.fi][0]=v;
        mx[i.fi][0]=i.se;
        dfs(i.fi,v);
      }
  }
  //get max between path a and b
  int getlca(int a, int b){
    int result=0;
    if(h[a]>h[b])swap(a,b);
    for(int i=L-1;i>=0;i--){if(h[a]<=h[up[b][i]])domax(result,mx[b][i]),b=up[b][i];}
    if(a==b)return result;
    for(int i=L-1;i>=0;i--){if(up[a][i]!=up[b][i])
      domax(result,mx[a][i]),domax(result,mx[b][i]),a=up[a][i],b=up[b][i];
    }
    domax(result,max(mx[a][0],mx[b][0]));
    return result;
  }
  int go(int v, int len){
    for(auto i=L-1;i>=0;i--) if((len&(1<<i))){ v=up[v][i]; }
    return v;
  }
};
endsnippet

snippet prims "prim's algorithm for mst"
class prims{
  public:
    typedef ll dt;
    typedef pair<dt,int> pt;
    int n;
    const graphwal &g;
    vector<dt> d;
    vi pr;
    vector<bool> v;
    const static dt MAXV=LLONG_MAX;
    priority_queue<pt,vector<pt>,greater<pt>> h;
    prims(const graphwal &g):
      n(g.n),g(g),d(n),pr(n),v(n){}
    dt calc(int sr=0){
      pt ret;
      dt mst=0;
      int nmst=0;
      fill(v.begin(),v.end(),false);
      fill(pr.begin(),pr.end(),-1);
      fill(d.begin(),d.end(),MAXV);
      d[sr]=0;
      h.push(pt(0,sr));
      while(!h.empty()){
        ret=h.top();
        h.pop();
        if(v[ret.se])continue;
        v[ret.se]=true;
        mst+=ret.fi;
        nmst++;
        for(auto i:g.ed[ret.se]){
          if(!v[i.fi] && d[i.fi] > i.se){
            d[i.fi]=i.se;
            pr[i.fi]=ret.se;
            h.push(pt(d[i.fi],i.fi));
          }
        }
      }
      if(nmst!=n)return -1;
      return mst;
    }
    bool inmst(int a, int b){
      return (pr[a]==b || pr[b]==a);
    }
};
endsnippet

snippet hungarian "hungarian algo"
class hungarian{
  static const int N=${1:105};
  static const ${2:int} INF=${3:INT_MAX};
  typedef ${4:int} dt;
  typedef vector<dt> cdt;
  typedef vector<cdt> ct;
  public:
  int nx,ny,mx,xy[N],yx[N],prev[N],slackx[N];
  dt lx[N],ly[N],slack[N];
  bool s[N],t[N];
  const ct &cost;
  hungarian(const int &nx,const int &ny,const ct &cost):nx(nx),ny(ny),cost(cost){}
  void init()
  {
    memset(lx, 0, sizeof(lx));
    memset(ly, 0, sizeof(ly));
    for (int x=0;x<nx; x++)
      for (int y=0;y<ny; y++)
        lx[x] = max(lx[x], cost[x][y]);
  }
  void update() {
    int x, y; //init delta as infinity
    dt delta=INF;
    for (y=0;y<ny;y++) //calculate delta using slack
      if (!t[y]) delta = min(delta, slack[y]);
    for (x=0;x<nx;x++) //update X labels
      if (s[x]) lx[x] -= delta;
    for (y=0;y<ny;y++) //update Y labels
      if (t[y]) ly[y] += delta;
    for (y=0;y<ny;y++) //update slack array
      if (!t[y]) slack[y] -= delta;
  }
  void add(int x, int prevx){
    //x - current vertex,prevx - vertex from X before x in the alternating path,
    //so we add edges (prevx, xy[x]), (xy[x], x)
    s[x] = true; //add x to S
    prev[x] = prevx; //we need this when augmenting
    for (int y=0;y<ny;y++) //update slacks, because we add new vertex to S
      if (lx[x] + ly[y] - cost[x][y] < slack[y]){
        slack[y] = lx[x] + ly[y] - cost[x][y];
        slackx[y] = x;
      }
  }

  void augment(){ //main function of the algorithm
    if (mx == min(nx,ny)) return; //check wether matching is already perfect
    int x, y, root; //just counters and root vertex
    int q[N], wr = 0, rd = 0; //q - queue for bfs, wr,rd - write and read
    //pos in queue
    memset(s, false, sizeof(s)); //init set S
    memset(t, false, sizeof(t)); //init set T
    memset(prev, -1, sizeof(prev)); //init set prev - for the alternating tree
    for (x=0;x<nx; x++) //finding root of the tree
      if (xy[x] == -1){
        q[wr++] = root = x;
        prev[x] = -2;
        s[x] = true;
        break;
      }
    for (y=0;y<ny;y++){ //initializing slack array
      slack[y] = lx[root] + ly[y] - cost[root][y];
      slackx[y] = root;
    }
    //second part of augment() function
    while (true) //main cycle
    {
      while (rd < wr) //building tree with bfs cycle
      {
        x = q[rd++]; //current vertex from X part
        for (y=0;y<ny;y++) //iterate through all edges in equality graph
          if (cost[x][y] == lx[x] + ly[y] && !t[y])
          {
            if (yx[y] == -1) break; //an exposed vertex in Y found, so augmenting path exists!
            t[y] = true; //else just add y to T,
            q[wr++] = yx[y]; //add vertex yx[y], which is matched with y, to the queue
            add(yx[y], x); //add edges (x,y) and (y,yx[y]) to the tree
          }
        if (y<ny) break; //augmenting path found!
      }
      if (y<ny) break; //augmenting path found!

      update(); //augmenting path not found, so improve labeling
      wr = rd = 0;
      for (y=0;y<ny;y++)
        //in this cycle we add edges that were added to the equality graph as a
        //result of improving the labeling, we add edge (slackx[y], y) to the tree if
        //and only if !T[y] && slack[y] == 0, also with this edge we add another one
        //(y, yx[y]) or augment the matching, if y was exposed
        if (!t[y] && slack[y] == 0)
        {
          if (yx[y] == -1) //exposed vertex in Y found - augmenting path exists!
          {
            x = slackx[y];
            break;
          }
          else
          {
            t[y] = true; //else just add y to T,
            if (!s[yx[y]])
            {
              q[wr++] = yx[y]; //add vertex yx[y], which is matched with y, to the queue
              add(yx[y], slackx[y]); //and add edges (x,y) and (y, yx[y]) to the tree
            }
          }
        }
      if (y<ny) break; //augmenting path found!
    }
    if(y<ny) //we found augmenting path!
    {
      mx++; //increment matching in this cycle we inverse edges along augmenting path
      for (int cx = x, cy = y, ty; cx != -2; cx = prev[cx], cy = ty)
      {
        ty = xy[cx];
        yx[cy] = cx;
        xy[cx] = cy;
      }
      augment(); //recall function, go to step 1 of the algorithm
    }
  }//end of augment() function
  dt doit()
  {
    dt ret = 0; //weight of the optimal matching
    mx = 0; //number of vertices in current matching
    memset(xy, -1, sizeof(xy));
    memset(yx, -1, sizeof(yx));
    init(); //step 0
    augment(); //steps 1-3
    for (int x=0;x<nx;x++) ret += cost[x][xy[x]];
    return ret;
  }
};
endsnippet
snippet scctarjan "strongly connected components using tarjan"
struct scctarjan{
  const graphal &g;
  graphal gc;
  vi d,st;
  int n, stz, cs;
  scctarjan(const graphal &g):
    g(g),
    d(g.n,-1),
    st(g.n+5,0),
    n(g.n),
    stz(0),
    cs(g.n) { }
  //prev not required for directed graph
  int dfs(int v, int prev) {
    int init = stz;
    st[stz++]=v;
    int res=d[v]=init;
    for(auto& edge : g.ed[v]){
      int nv = edge;
	  if(nv==prev) continue;
      if(d[nv] < 0) { //not visited
        res = min(res,dfs(nv));
      }
      else { res = min(res, d[nv]); }  //visited
    }

    //edge bi-connected component or strongly connected compoenent. root is selected by default
    //all the items from timer till the end of the stack belongs to one biconnected component.
    //all the edges among those items only needs to be selected.
    //(There could be outgoing edges to other components which needs to be ignored.)
    if(res == init){
      for(int i=init;i<stz;i++){d[st[i]]=cs;}
      cs++;
      stz=init;
    }
    return res;
  }
  void generatescc() {
    for(int i=0;i<n;i++)
      if(d[i]<0)dfs(i,-1);
    for(int i=0;i<n;i++){
      assert(d[i]>=n);
      d[i]-=n;
    }
    cs-=n;
    gc.reset(cs);
    set<pi> seen;
    for(int i=0;i<n;i++){
      for(auto j:g.ed[i])
        if(d[i]!=d[j] && seen.find({d[i],d[j]})==seen.end()){
          seen.insert({d[i],d[j]});

          //check for bi directional add
          //seen.insert({d[j],d[i]});
          gc.add(d[i],d[j]);
        }
    }
  }
};
endsnippet

snippet tarjan "tarjan algo for scc and bi vertex and bi edge"
class tarjan {
  const graphwal &g;
  vi d,flags,stack;
  int to;
  bool ans;
  public:
  tarjan(const graphwal &g):
    g(g),
    d(g.n,-1),
    flags(g.n+1,-1),
    stack() { }

  int dfs(int v, int prev) {
    int timer = stack.size(), cdrn=0;
    stack.pb(v);
    int res=d[v]=timer;
    bool ap=false;
    for(auto& edge : g.ed[v]){
      int nv = edge.fi, nres;
      if(nv == prev) {continue;}
      cdrn++;
      if(d[nv] < 0) { //not visited
        nres=dfs(nv,v);
        if(nres>=timer)ap=true;
        res = min(res,nres);
      }
      else { res = min(res, d[nv]); }  //visited
    }
    if(ap==true || (prev==g.n && cdrn>1)){} // articulation point

    //edge bi-connected component or strongly connected compoenent. root is selected by default
    //all the items from timer till the end of the stack belongs to one biconnected component.
    //all the edges among those items only needs to be selected.
    //(There could be outgoing edges to other components which needs to be ignored.)
    if(res == timer){
      if(find(stack.begin() + timer, stack.end(), to) != stack.end()) {
        for(size_t i=timer;i<stack.size();i++){flags[stack[i]] = v;}
        flags[prev]=v; //The incoming edge from parent is selected.
        for(size_t i=timer;i<stack.size();i++) {
          for(auto& edge : g.ed[stack[i]]) {
            if(flags[edge.fi]==v && edge.se==1){ans = true;}
          }
        }
        flags[prev] = -1;
        to = prev;
      }
      for(size_t i=timer;i<stack.size();i++){d[stack[i]]=g.n;}
      stack.resize(timer);
    }
    return res;
  }
  //find all components from a to b
  bool go(int a, int b) {
    to=b;
    ans=false;
    dfs(a,g.n);
    return ans;
  }
};
endsnippet

snippet floyd "all pair shortest path"
for(int k=0;k<n;k++)
for(int i=0;i<n;i++)
for(int j=0;j<n;j++){if(d[i][j]>d[i][k]+d[k][j]) d[i][j]=d[i][k]+d[k][j];}
endsnippet

snippet bfsgraph "bfs on a graph"
void bfs(int s=0){
  int qb=0, qe=0, ix;
  vector<int> q(n);
  vector<${1:int}> ${2:d}(n);
  fill($2.begin(),$2.end(),${3:INT_MAX});
  $2[s]=0;
  q[qe++]=s;
  while(qb<qe){
    ix=q[qb++];
    for(auto i:ed[ix])
      if($2[i]>$2[ix]+1){
        $2[i]=$2[ix]+1;
        q[qe++]=i;
      }
  }
}
endsnippet
snippet eulertour "euler tour of a graph"
void eulerdfs(int ix){
  if(ed[ix].empty()){
    ans.pb(ix);
    return;
  }
  while(!ed[ix].empty()){
    int nix=*ed[ix].begin();
    ed[ix].erase(ed[ix].begin());
    auto it=ed[nix].find(ix);
    assert(it!=ed[nix].end());
    ed[nix].erase(it);
    eulerdfs(nix);
  }
  ans.pb(ix);
}
void eulertour(){
  //ed[ix] preferred as multiset
  bool done=false;
  ans.clear();
  for(int i=0;i<n;i++) if(ed[i].size()&1){
    eulerdfs(i);
    done=true;
  }
  if(!done)for(int i=0;i<n;i++) if(ed[i].size()>0){ eulerdfs(i); }
  for(int i=ans.size()-1;i>=0;i--){
    printf("%d\n",ans[i]);

  }
}
endsnippet

snippet flow "flow network using priority q"
//T should be signed.
template<class T>
class flow{
  typedef pair<T,int> pqdt;
  typedef vector<T> vt;
  typedef graphed<T> fgraph;
  typedef edge<T> fedge;
  public:
  int n, ssourcev, ssinkv;
  bool sourceb=false, sinkb=false;
  fgraph &g;
  flow(const int &n, fgraph &g):n(n),g(g){}

  void addedge(const int &s, const int &d, const T &cap){ g.add(s,d,cap); g.add(d,s,0); }
  void load(int m){
    int a,b;T cap;
    for(int i=0;i<m;i++){
      a=gi()-1, b=gi()-1,cap=gll();
      addedge(a,b,cap);
    }
  }
  void addssedge(const int &v, const T &cap, bool issource=true){
    if(issource && !sourceb){
      sourceb=true;
      ssourcev=n;
      g.resize(++n);
    }
    if(!issource && !sinkb){
      sinkb=true;
      ssinkv=n;
      g.resize(++n);
    }
    if(issource)addedge(ssourcev,v,cap);
    else addedge(v,ssinkv,cap);
  }
  T augment(int source, int sink){
    const T MAXV = numeric_limits<T>::max();
    vt d(n,0);
    vi pr(n,-1);
    priority_queue<pqdt> q;
    d[source]=MAXV;
    q.push({MAXV,source});
    int cur=-1;
    T dist,res;
    while(!q.empty() && cur!=sink){
      dist=q.top().fi;
      cur=q.top().se;
      q.pop();
      if(dist!=d[cur])continue;
      if(cur==sink)continue;
      for(auto i:g.e[cur]){
        const fedge &e=g.edges[i];
        T td=min(dist,e.cap-e.flow);
        if(td>d[e.b]){
          d[e.b]=td;
          pr[e.b]=i;
          q.push({td,e.b});
        }
      }
    }
    if(d[sink]==0)return 0;
    res=d[sink];
    cur=sink;
    while(cur!=source){
      int eix=pr[cur];
      assert(eix>=0);
      fedge &ed = g.edges[eix];
      fedge &red = g.edges[eix^1];
      assert(cur==ed.b);
      ed.flow+=res;
      red.flow-=res;
      cur=ed.a;
    }
    return res;
  }
  T calc(){return calc(ssourcev,ssinkv);}
  T calc(int source, int sink){
    assert((source>=0)&&(sink>=0)&&(source<n)&&(sink<n));
    for(auto &i:g.edges){i.flow = 0;}
    T res=0;
    T up;
    while((up=augment(source,sink))!=0)res+=up;
    return res;
  }
};
endsnippet

snippet 2sat "two satisfiability algo"
struct sat2 {
  //graph should be directional
  graphal g;
  int n;
  sat2(int n) {
    g.reset(2*n);
    n=2*n;
  }
  void reset(int n) {
    g.reset(2*n);
    this->n=2*n;
  }
  int getix(int ix) {
    return ix*2;
  }
  void mustTrue(int ia) {
    g.add(ia^1,ia);
  }
  void orC(int ia, int ib) {
    //!a->b !b->a
    g.add(ia^1,ib);
    g.add(ib^1,ia);
  }
  void xorC(int ia, int ib) {
    orC(ia,ib);
    orC(ia^1,ib^1);
  }
  void andC(int ia, int ib) {
    g.add(ia,ib);
    g.add(ib,ia);
  }
  void nandC(int ia, int ib) {
    orC(ia^1,ib^1);
  }
  bool possible() {
    scctarjan scc(g);
    scc.generatescc();
    for(int i=0;i<n;i+=2){
      if(scc.d[i]==scc.d[i+1])return false;
    }
    return true;
  }
};
endsnippet
