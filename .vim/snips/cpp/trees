snippet fenwicksum "range sum using fenwick"
//fenwick class. index 1 to n for array of size n
class fenwick {
  ${1:int} * a;
  int n;
  public:
  fenwick(int x){
    n = x;
    a = new $1[n+1];
    memset(a,0,sizeof($1)*(n+1));
  }
  ~fenwick(){
    delete[] a;
  }

  $1 getsum(int ix){
    $1 ret=0;
    for(int i=ix;i>0;i-=(i&(-i)))ret+=a[i];
    return ret;
  }

  //sum from ixa to ixb both inclusive
  int getsumbw(int ixa, int ixb){
    return(getsum(ixb)-getsum(ixa-1));
  }

  //add val to ix
  void add(int ix, $1 val) {
    for(int i=ix;i<=n;i+=(i&(-i)))a[i]+=val;
  }

  //get value from index ix
  $1 getval(int ix){
    $1 ret = a[ix];
    if(ix>0) {
      int tmp = ix - (ix&(-ix));
      ix--;
      while(ix!=tmp){
        ret -= a[ix];
        ix -= (ix&(-ix));
      }
    }
    return ret;
  }
};
endsnippet

snippet wordtree "form a tree using array of words"
class wordtree {
  int **t;
  int *endix;
  int ix;
  int tx;
  public:
    wordtree(){
      t=new int*[MAXT];
      endix=new int[MAXT];

      for(int i=0;i<MAXT;i++){
        t[i]=new int[26];
        for(int j=0;j<26;j++)t[i][j]=0;
      }
      memset(endix,-1,sizeof(endix));

      ix=0;
      tx=1;
    }
    void update(int tix,char* s){
      if((*s)==0){
        endix[tix]=ix;
        return;
      }
      int c=(*s)-'a';
      if(t[tix][c]==0)t[tix][c]=tx++;
      update(t[tix][c],s+1);
    }
    void addword(char* s){
      update(0,s);
      ix++;
    }
};
endsnippet
