snippet rangesum "sum of array ranges"
class rangesum{
  ${1:ll} * sum;
  public:
    rangesum(const ${2:int} *inp, const int &n){ //ix 0->n-1
      sum=new $1[n+1]();
      for(int i=0;i<n;i++) s[i+1]=s[i]+inp[i];
    }
    ~rangesum() {delete [] sum;}
    $1 get(int x, int y) {return s[y+1]-s[x];} //y>=x, x,y inclusive

}
endsnippet
snippet sliding "sliding min / max"
class slidingrange {
  int l, r, n;
  const ${1:int} *a;
  typedef pair<$1,int> spi;
  deque<spi> dq;
  public:
  slidingrange(const $1 *a, int n):n(n),l(-1),r(-1),a(a){}
  $1 slide(int L, int R){ //0->n-1
    assert(l<=L && r<=R && L<n && R<n);
    for(int i=r+1;i<=R;i++){
      while(!dq.empty() && dq.back().fi>=a[i])dq.pop_back();
      dq.push_back(spi(a[i],i));
    }
    while(dq.front().se<L)dq.pop_front();
    l=L,r=R;
    return dq.front().fi;
  }
};
endsnippet
